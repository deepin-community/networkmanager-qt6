/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was:
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef AGENTMANAGERINTERFACE_H
#define AGENTMANAGERINTERFACE_H

#include "generictypes.h"

#include <QDBusAbstractInterface>
#include <QDBusPendingReply>
#include <QList>
#include <QObject>
#include <QString>
#include <QVariant>

/*
 * Proxy class for interface org.freedesktop.NetworkManager.AgentManager
 */
class OrgFreedesktopNetworkManagerAgentManagerInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
#ifdef NMQT_STATIC
    {
        return "org.kde.fakenetwork.AgentManager";
    }
#else
    {
        return "org.freedesktop.NetworkManager.AgentManager";
    }
#endif

public:
    OrgFreedesktopNetworkManagerAgentManagerInterface(const QString &service,
                                                      const QString &path,
                                                      const QDBusConnection &connection,
                                                      QObject *parent = nullptr);

    ~OrgFreedesktopNetworkManagerAgentManagerInterface() override;

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Register(const QString &identifier)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(identifier);
        return asyncCallWithArgumentList(QStringLiteral("Register"), argumentList);
    }

    inline QDBusPendingReply<> RegisterWithCapabilities(const QString &identifier, uint capabilities)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(identifier) << QVariant::fromValue(capabilities);
        return asyncCallWithArgumentList(QStringLiteral("RegisterWithCapabilities"), argumentList);
    }

    inline QDBusPendingReply<> Unregister()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Unregister"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
