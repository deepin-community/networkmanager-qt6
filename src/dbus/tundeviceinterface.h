/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was:
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TUNDEVICEINTERFACE_H
#define TUNDEVICEINTERFACE_H

#include "generictypes.h"

#include <QDBusAbstractInterface>
#include <QObject>
#include <QString>
#include <QVariant>

/*
 * Proxy class for interface org.freedesktop.NetworkManager.Device.Tun
 */
class OrgFreedesktopNetworkManagerDeviceTunInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
#ifdef NMQT_STATIC
    {
        return "org.kde.fakenetwork.Device.Tun";
    }
#else
    {
        return "org.freedesktop.NetworkManager.Device.Tun";
    }
#endif

public:
    OrgFreedesktopNetworkManagerDeviceTunInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopNetworkManagerDeviceTunInterface() override;

    Q_PROPERTY(qlonglong Group READ group)
    inline qlonglong group() const
    {
        return qvariant_cast<qlonglong>(property("Group"));
    }

    Q_PROPERTY(QString HwAddress READ hwAddress)
    inline QString hwAddress() const
    {
        return qvariant_cast<QString>(property("HwAddress"));
    }

    Q_PROPERTY(QString Mode READ mode)
    inline QString mode() const
    {
        return qvariant_cast<QString>(property("Mode"));
    }

    Q_PROPERTY(bool MultiQueue READ multiQueue)
    inline bool multiQueue() const
    {
        return qvariant_cast<bool>(property("MultiQueue"));
    }

    Q_PROPERTY(bool NoPi READ noPi)
    inline bool noPi() const
    {
        return qvariant_cast<bool>(property("NoPi"));
    }

    Q_PROPERTY(qlonglong Owner READ owner)
    inline qlonglong owner() const
    {
        return qvariant_cast<qlonglong>(property("Owner"));
    }

    Q_PROPERTY(bool VnetHdr READ vnetHdr)
    inline bool vnetHdr() const
    {
        return qvariant_cast<bool>(property("VnetHdr"));
    }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QVariantMap &properties);
};

#endif
